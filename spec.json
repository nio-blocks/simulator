{
  "nio/CounterIntervalSimulator": {
    "version": "1.4.0",
    "description": "Simulates and emits a signal every [interval] seconds.",
    "categories": [
      "Signal Generator"
    ],
    "tags": "simulator, generator, first, count",
    "from_readme":"docs/counter_interval_simulator.md",
    "from_python":""
  },
  "nio/CounterSafeSimulator": {
    "version": "1.2.0",
    "description": "Simulates and emits a signal every [interval] seconds, even if not all signals have been simulated.  If the 'max_count' is too high, the block will emit a signal with however many signals it was able to create during the defined interval.",
    "categories": [
      "Signal Generator"
    ],
    "tags":"",
    "from_readme":"",
    "from_python":""
  },
  "nio/FileIntervalSimulator": {
    "version": "1.4.0",
    "description": "Creates signals as defined by a json file. The file must be a list of dictionaries where each dictionary is a nio Signal. The file should be loadable using `json.load`.  Each call to generate_signals will return a signal from the list loaded in from the json file.  When asked to generate -1 signals, it will generate all signals in the file.",
    "categories": [
      "Signal Generator"
    ],
    "tags":"",
    "from_readme":"",
    "from_python":""
  },
  "nio/IdentityCronSimulator": {
    "version": "0.2.0",
    "description": "Simulate and emit signals according to a cron-like timetable",
    "categories": [
      "Signal Generator"
    ],
    "tags":"",
    "from_readme":"",
    "from_python":""
  },
  "nio/IdentityIntervalSimulator": {
    "version": "1.3.0",
    "description": "Simulates and notifies empty signals.",
    "categories": [
      "Signal Generator"
    ],
    "tags":"",
    "from_readme":"",
    "from_python":""
  }
}
